{"ast":null,"code":"const clientId = '6ce00c35a2c14ef287ddd6950c3a50cb';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // check for access token match\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); // window.location.href points to the url of the page. Ours would be localHost:3000 or something\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n\n      //This clears the parameters, allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    const jsonResponse = await response.json();\n    if (!jsonResponse.tracks) {\n      return [];\n    }\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n      // fetch request sent to this endpoint, with our userId\n      {\n        // passed an object aswell, with headers set to our headers, the method, and body, set to the name the user has created to their playlist\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","response","fetch","headers","Authorization","jsonResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","then","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/Private/jammming/src/util/Spotify.js"],"sourcesContent":["const clientId = '6ce00c35a2c14ef287ddd6950c3a50cb';\r\nconst redirectUri = 'http://localhost:3000/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  \r\n  \r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); // window.location.href points to the url of the page. Ours would be localHost:3000 or something\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      //This clears the parameters, allowing us to grab a new access token when it expires.\r\n\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n  \r\n  async search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    });\r\n    const jsonResponse = await response.json();\r\n    if (!jsonResponse.tracks) {\r\n      return [];\r\n    }\r\n    return jsonResponse.tracks.items.map(track => ({\r\n      id: track.id,\r\n      name: track.name,\r\n      artist: track.artists[0].name,\r\n      album: track.album.name,\r\n      uri: track.uri\r\n    }));\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, // fetch request sent to this endpoint, with our userId\r\n      {                                                                    // passed an object aswell, with headers set to our headers, the method, and body, set to the name the user has created to their playlist\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({ name: name })\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ uris: trackUris })\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}